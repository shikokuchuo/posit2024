---
format:
   revealjs:
     slide-number: true
     incremental: true
     footer: "&copy; 2024 Hikbiki AI Limited, Eli Lilly and Company"
     view-distance: 100
     mobile-view-distance: 100
---

##

```{r, include = FALSE, echo = FALSE}
knitr::opts_chunk$set(
  cache = FALSE,
  comment = "#>",
  fig.width = 10, 
  fig.height = 5
)
```

<style>
.reveal .tiny {
  display: inline-block;
  font-size: 0.5em;
  line-height: 1.0em;
  vertical-align: top;
}
.reveal .medium {
  display: inline-block;
  font-size: 0.75em;
  line-height: 1.5em;
  vertical-align: top;
}
</style>

<center>
<br>
<h4>`mirai` and `crew`: next-generation async to supercharge `promises`, Plumber, Shiny, and `targets`</h4>
<img src="./images/title.png" height="400px">
<br>
<h4>Charlie Gao and Will Landau</h4>
</center>

## 

<center>
<img src="./images/mirai.png">
</center>

## Extending {mirai}

<center>
<img src="./images/crew.png">
</center>

## Science demands heavy computing.

<center>
<img src="./images/pipette.jpg" width=500>
</center>

::: {style="font-size:90%"}

* Bayesian methods help safety/efficacy decisions in clinical trials.
* Each model could take hours to run.
* 1000+ simulations to design a clinical trial.

:::

## Too much work for one laptop

:::: {.columns}

::: {.column width="50%"}

![](./images/hpc1.jpg)

:::

::: {.column width="50%"}

![](./images/hpc2.jpg)

:::

::::

* Clinical trial simulations often need hundreds of computers.
* Need distributed computing: e.g. SLURM clusters, AWS Batch
* Challenges: <b><span style="color:blue">access</span></b>, <b><span style="color:brown">overhead</span></b>, and <b><span style="color:darkGreen">cost</span></b>.


## `crew` scales data science.

![](./images/plugins.png)

1. Low-<b><span style="color:brown">overhead</span></b> interprocess communication with `mirai`.
2. Auto-scaling reduces <b><span style="color:brown">overhead</span></b> and <b><span style="color:darkGreen">cost</span></b>.
3. Plugins <b><span style="color:blue">access</span></b> big high-performance computing systems.

## Auto-scaling reduces <b><span style="color:brown">overhead</span></b> & <b><span style="color:darkGreen">cost</span></b>.

![](./images/autoscale1.png)

## Auto-scaling reduces <b><span style="color:brown">overhead</span></b> & <b><span style="color:darkGreen">cost</span></b>.

![](./images/autoscale2.png)

## Auto-scaling reduces <b><span style="color:brown">overhead</span></b> & <b><span style="color:darkGreen">cost</span></b>.

![](./images/autoscale3.png)

## Auto-scaling reduces <b><span style="color:brown">overhead</span></b> & <b><span style="color:darkGreen">cost</span></b>.

![](./images/autoscale4.png)

## Auto-scaling reduces <b><span style="color:brown">overhead</span></b> & <b><span style="color:darkGreen">cost</span></b>.

![](./images/autoscale5.png)

## Auto-scaling reduces <b><span style="color:brown">overhead</span></b> & <b><span style="color:darkGreen">cost</span></b>.

![](./images/autoscale6.png)

## Simple controller interface

<br>

:::: {style="font-size:150%"}

```r
# New controller

controller <- crew_controller_local(
  workers = 2,
  seconds_idle = 10
)
```

::::

## Simple controller interface

<br>

:::: {style="font-size:150%"}

```r
# Submit a task.

controller$push(1 + 1)
```

::::

## Simple controller interface

<br>

:::: {style="font-size:150%"}

```r
# Get the result.

controller$pop()
```

::::

## AWS Batch plugin

:::: {.columns style="font-size:125%"}

::: {.column width="75%"}

<br>

```r
crew_controller_aws_batch(
  workers = 100,
  seconds_idle = 60,
  aws_batch_job_definition = "DEF",
  aws_batch_job_queue = "QUEUE"
)
```
:::

::: {.column width="25%"}

<img src="./images/crew.aws.batch.png">

:::

::::

<br>

* Write your own plugins: <https://wlandau.github.io/crew/articles/plugins.html>

## `crew` unblocks Shiny apps.

:::: {.columns style="font-size:130%"}

```r
observeEvent(input$button, {
  replicate(1000, 
    controller$push(flip_coin(), ...) %...>%
      collect_flips(controller, ...)
  )
})
```

::::

![](./images/coin-flips.gif)

## `crew` accelerates `targets`

<br>

:::: {.columns style="font-size:115%"}

```r
#_targets.R file

tar_option_set(
  controller = crew_controller_aws_batch(
    workers = 100,
    seconds_idle = 120,
    aws_batch_job_definition = "DEF",
    aws_batch_job_queue = "QUEUE"
  )
)
```

::::
