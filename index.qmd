---
format:
   revealjs:
     slide-number: true
     footer: "&copy; 2024 Hikbiki AI Limited, Eli Lilly and Company"
     view-distance: 100
     mobile-view-distance: 100
---

##

```{r, include = FALSE, echo = FALSE}
knitr::opts_chunk$set(
  cache = FALSE,
  comment = "#>",
  fig.width = 10, 
  fig.height = 5
)
```

<style>
.reveal .tiny {
  display: inline-block;
  font-size: 0.5em;
  line-height: 1.0em;
  vertical-align: top;
}
.reveal .medium {
  display: inline-block;
  font-size: 0.75em;
  line-height: 1.5em;
  vertical-align: top;
}
</style>

<center>
<br>
<h4>`mirai` and `crew`: next-generation async to supercharge `promises`, Plumber, Shiny, and `targets`</h4>
<img src="./images/title.png" height="400px">
<br>
<h4>Charlie Gao and Will Landau</h4>
</center>

##

<center>
<img src="./images/mirai-crew.png" width=500>
</center>

:::: {style="font-size:85%"}

* Machine learning, Bayesian data analysis, genomics, and simulation are demanding workflows with many long-running tasks.
* Parallel/async computing is essential.
* `crew` and `mirai`: next-gen parallel/async for R.

::::

## 

<center>
<img src="./images/mirai.png">
</center>

## 

<center>
<img src="./images/crew.png">
</center>

## Why `crew`?

<center>
<img src="./images/plugins.png" width=750>
</center>

* Extends `mirai` to distributed computing.
* Plugins for clusters and cloud services.
* Users can write plugins of their own.
* Centralized interface and worker auto-scaling.
* Integrates with Shiny, `promises`, and `targets`.

## `crew` basics

:::: {.columns}

::: {.column width="75%"}

```r
# Start a controller.
library(crew)
controller <- crew_controller_local(
  workers = 2,
  seconds_idle = 10
)
controller$start()

# Submit tasks asynchronously.
controller$push(command = 1 + 1)
controller$push(command = sqrt(9))

# Wait for a task to finish.
controller$wait(mode = "one")

# Collect the result.
controller$pop()$result[[1]]
#> [1] 3
```

:::

::: {.column width="25%"}

<img src="./images/crew.png">

:::

::::

## AWS Batch plugin

:::: {.columns style="font-size:95%"}

::: {.column width="75%"}

```r
# Start an AWS Batch controller with many workers.
library(crew.aws.batch)
controller <- crew_controller_aws_batch(
  workers = 100,
  seconds_idle = 60,
  aws_batch_job_definition = "YOUR_JOB_DEFINITION",
  aws_batch_job_queue = "YOUR_JOB_QUEUE"
)
controller$start()

# Submit many tasks asynchronously.
controller$walk(
  command = your_expensive_task(data = object),
  iterate = list(object = list_of_objects),
  data = list(expensive_task = expensive_task)
)
```

:::

::: {.column width="25%"}

<img src="./images/crew.aws.batch.png">

:::

::::

## `crew` with Shiny

{{< video https://vimeo.com/927130003  width="100%" height="85%" >}}

## Extended tasks and `crew` promises

<br>

:::: {.columns style="font-size: 80%"}

::: {.column width="43%"}

### UI

```r
fluidPage(
  actionButton(
    "task",
    "Submit a task (5 seconds)"
  ),
  textOutput("status"),
  plotOutput("result")
)
```

:::

::: {.column width="57%"}

### Server

```r
# Shiny extended task with a {crew} promise:
task <- ExtendedTask$new(
  function() controller$promise(mode = "one")
)

# Invoke the extended task on push.
observeEvent(input$task, {
  controller$push(
    command = run_task(),
    data = list(run_task = run_task)
  )
  task$invoke()
})

# Get results from the extended task.
output$result <- renderPlot(
  task$result()$result[[1]]
)
```

:::

::::

## `crew` with `targets`

:::: {.columns style="font-size: 80%"}

::: {.column width="55%"}

### `_targets.R` file

```r
library(targets)
library(crew.aws.batch)
batch <- crew_controller_aws_batch("...")

tar_option_set(
  # For AWS Batch:
  controller = batch,
  
  # For AWS S3:
  repository = "aws",
  resources = tar_resources(aws = "...")
)

tar_source()
list(
  tar_target(data, get_data()),
  # ...
)
```

:::

::: {.column width="45%"}

### Dependency graph

```{mermaid}
graph TB
  direction TB
  x0b88dc07a3d2db7d(["model_covariates"]):::outdated --> x2f9fc018ab703ad9(["summary_covariates"]):::outdated
  xb7119b48552d1da3(["data"]):::outdated --> x0cdc9665e00a10da(["model_interactions"]):::outdated
  xb7119b48552d1da3(["data"]):::outdated --> xbb787cf099f745bb(["model_simple"]):::outdated
  x0cdc9665e00a10da(["model_interactions"]):::outdated --> xe1021174c85186bb(["summary_interactions"]):::outdated
  x2f9fc018ab703ad9(["summary_covariates"]):::outdated --> x86c744fee9e9e798(["compare_models"]):::outdated
  xe1021174c85186bb(["summary_interactions"]):::outdated --> x86c744fee9e9e798(["compare_models"]):::outdated
  x0c03b9a838de70e1(["summary_simple"]):::outdated --> x86c744fee9e9e798(["compare_models"]):::outdated
  x86c744fee9e9e798(["compare_models"]):::outdated --> x34784fce8899e1b4(["quarto_report"]):::outdated
  xb7119b48552d1da3(["data"]):::outdated --> x0b88dc07a3d2db7d(["model_covariates"]):::outdated
  xbb787cf099f745bb(["model_simple"]):::outdated --> x0c03b9a838de70e1(["summary_simple"]):::outdated
  classDef outdated stroke:#000000,color:#000000,fill:#78B7C5;
  classDef none stroke:#000000,color:#000000,fill:#94a4ac;
```

:::

::::
