---
format:
   revealjs:
     slide-number: true
     incremental: true
     footer: "&copy; 2024 Hikbiki AI Limited, Eli Lilly and Company"
     view-distance: 100
     mobile-view-distance: 100
---

##

```{r, include = FALSE, echo = FALSE}
knitr::opts_chunk$set(
  cache = FALSE,
  comment = "#>",
  fig.width = 10, 
  fig.height = 5
)
```

<style>
.reveal .tiny {
  display: inline-block;
  font-size: 0.5em;
  line-height: 1.0em;
  vertical-align: top;
}
.reveal .medium {
  display: inline-block;
  font-size: 0.75em;
  line-height: 1.5em;
  vertical-align: top;
}
</style>

<center>
<br>
<h4>`mirai` and `crew`: next-generation async to supercharge `promises`, Plumber, Shiny, and `targets`</h4>
<img src="./images/title.png" height="400px">
<br>
<h4>Charlie Gao and Will Landau</h4>
</center>

## 

<center>
<img src="./images/mirai.png">
</center>

## 

<center>
<img src="./images/crew.png">
</center>

## Data science is demanding

<center>
<img src="./images/workload-horizontal.png" width=700>
</center>

* Heavy computation: machine learning, Bayesian data analysis, genomics, simulation
* High-performance computing is:
    1. Expensive.
    2. Difficult to access from R.

## `crew` helps data science scale.

<center>
<img src="./images/plugins.png" width=700>
</center>

1. Leverages the speed of `mirai`.
2. Auto-scales to reduce cost and overhead.
3. Flexible plugin system for high-performance computing platforms.

## Auto-scaling reduces overhead & cost.

![](./images/autoscale1.png)

## Auto-scaling reduces overhead & cost.

![](./images/autoscale2.png)

## Auto-scaling reduces overhead & cost.

![](./images/autoscale3.png)

## Auto-scaling reduces overhead & cost.

![](./images/autoscale4.png)

## Auto-scaling reduces overhead & cost.

![](./images/autoscale5.png)

## Step 1: start a `crew` controller.

<br>

:::: {style="font-size:150%"}

```r
# Start a controller.
library(crew)
controller <- crew_controller_local(
  workers = 2,
  seconds_idle = 10
)
controller$start()
```

::::

## Step 2: push tasks.

<br>

:::: {style="font-size:150%"}

```r
controller$push(command = 1 + 1)

controller$push(command = sqrt(9))
```

::::

## Step 3: collect results.

<br>

:::: {style="font-size:150%"}

```r
controller$pop()$result[[1]] # from sqrt(9)
#> [1] 3

controller$pop()$result[[1]] # from 1 + 1
#> [1] 2

controller$pop()$result[[1]] # no more results 
#> NULL
```

::::

## AWS Batch plugin

:::: {.columns style="font-size:125%"}

::: {.column width="75%"}

<br>

```r
crew_controller_aws_batch(
  workers = 100,
  seconds_idle = 60,
  aws_batch_job_definition = "DEF",
  aws_batch_job_queue = "QUEUE"
)
```

:::

::: {.column width="25%"}

<img src="./images/crew.aws.batch.png">

:::

::::

## `crew` unblocks Shiny apps

:::: {.columns style="font-size:130%"}

```r
observeEvent(input$button, controller$walk(...))

observe({
  invalidateLater(millis = 500)
  results <- controller$collect(error = "stop")
  ...
})
```

::::

![](./images/app.gif)

## `crew` accelerates `targets`

<br>

```{mermaid}
graph LR
  direction LR
  x0b88dc07a3d2db7d(["model_covariates"]):::outdated --> x2f9fc018ab703ad9(["summary_covariates"]):::outdated
  xb7119b48552d1da3(["data"]):::outdated --> x0cdc9665e00a10da(["model_interactions"]):::outdated
  x0cdc9665e00a10da(["model_interactions"]):::outdated --> xe1021174c85186bb(["summary_interactions"]):::outdated
  x2f9fc018ab703ad9(["summary_covariates"]):::outdated --> x86c744fee9e9e798(["compare_models"]):::outdated
  xe1021174c85186bb(["summary_interactions"]):::outdated --> x86c744fee9e9e798(["compare_models"]):::outdated
  x86c744fee9e9e798(["compare_models"]):::outdated --> x34784fce8899e1b4(["quarto_report"]):::outdated
  xb7119b48552d1da3(["data"]):::outdated --> x0b88dc07a3d2db7d(["model_covariates"]):::outdated
  classDef outdated stroke:#000000,color:#000000,fill:#78B7C5;
  classDef none stroke:#000000,color:#000000,fill:#94a4ac;
```

<br>

```r
tar_option_set(
  controller = crew_controller_aws_batch(
    workers = 100,
    ...
  )
)
```
